generate_concept:
  description: >
    Generate a unique, innovative, eye-catching, and marketable wall art concept. 
    Your output should include a detailed breakdown of the concept with explicit elements such as:
      - 5-7 Composition elements in short details, do not use surrealism, be creative, specific and unique
      - 3-5 Narrative or thematic elements that resonate with a specific target audience.
      - Determine the best aspect ratio for this concept: "portrait" (3:4) or "landscape" (4:3)
        based on the composition and visual impact of the concept.
    Provide the output in a structured JSON format with keys: "style", "theme", "target_audience", and "aspect_ratio".
    For aspect_ratio, specify either "portrait" or "landscape" based on which would best showcase the concept.
    Ensure the concept is appealing, detailed enough for easy visualization, and optimized for creating high-quality digital prints and mockups.

    IMPORTANT: After generating the concept, you MUST save it as a JSON file using the JsonSaveTool.
    The tool will ask the user if they want to use this concept. If the user rejects the concept,
    you must generate a new concept and try again until the user approves.

    Here's how to handle the user approval process:
    ```python
    from etsy_listing_creator.tools import JsonSaveTool

    json_saver = JsonSaveTool()
    concept_approved = False

    while not concept_approved:
        # Generate your concept
        your_concept_json_object = {
            "style": "Your detailed generated style",
            "theme": "Your detailed generated theme",
            "target_audience": "Your detailed identified target audience",
            "aspect_ratio": "portrait" or "landscape"
        }
        
        # Save the concept and check for user approval
        result = json_saver.run({
            "data": your_concept_json_object,
            "filename": "output/concept_data.json"
        })
        
        # If the user approved the concept, mark as approved and break the loop
        if result != "CONCEPT_REJECTED":
            concept_approved = True
            concept_json_path = result
            break
        
        # If we're here, the user rejected the concept, so generate a new one
        print("Generating a new concept based on user feedback...")

    # Return the approved concept data
    return {
        "status": "success",
        "concept": your_concept_json_object,
        "file_path": concept_json_path
    }
    ```

    Make sure to include the saved file path in your response so it can be used by subsequent tasks.
  expected_output: >
    A JSON object containing:
      - "status": "success" or "error"
      - "concept": The approved concept data
      - "file_path": Path to the saved concept JSON file
  agent: idea_generator

create_prompt:
  description: >
    Transform the previous art concept into a highly detailed, structured prompt for Stability AI's Flux model: 
    Details: Write a vivid, imaginative description highlighting the most visually compelling composition and narrative elements from the previous concept. Focus on evoking imagery rather than prescribing exact arrangements, to allow Flux's creativity to flourish.
    Style: Clearly specify an artistic style or blend of styles to fit the concept
    Stick to indigo blue and honey orange colors theme since it's our shops niche
    Make sure to include "Style of TOK, wall art design, indigo blue and honey orange colors" at the end of the prompt as plain text

    IMPORTANT: Extract the aspect_ratio from the concept (either "portrait" or "landscape") and include it in your output.
    Your output should be a JSON object with two keys:
    - "prompt": The well-structured text prompt for image generation
    - "aspect_ratio": The aspect ratio from the concept (either "portrait" or "landscape")

    After creating the prompt, you MUST save it as a JSON file using the JsonSaveTool:
    ```python
    from etsy_listing_creator.tools import JsonSaveTool

    json_saver = JsonSaveTool()
    result = json_saver.run({
        "data": {
            "prompt": "your generated prompt",
            "aspect_ratio": "portrait" or "landscape"
        },
        "filename": "output/prompt_data.json"
    })

    return {
        "status": "success",
        "prompt_data": {
            "prompt": "your generated prompt",
            "aspect_ratio": "portrait" or "landscape"
        },
        "file_path": result
    }
    ```
  expected_output: >
    A JSON object containing:
      - "status": "success" or "error"
      - "prompt_data": The prompt and aspect ratio data
      - "file_path": Path to the saved prompt JSON file
  agent: prompt_engineer

generate_image:
  description: >
    Utilize Replicate AI to generate a high-quality digital art image based on the detailed prompt.

    IMPORTANT: Extract both the prompt and aspect_ratio from the prompt_engineer's output.
    The prompt_engineer provides a JSON object with "prompt" and "aspect_ratio" keys.
    Use the exact prompt from the "prompt" field, and pass the "aspect_ratio" value to the ReplicateTool.

    When using the ReplicateTool, provide the aspect_ratio parameter in your JSON input:
    {
      "prompt": "the prompt text",
      "aspect_ratio": "portrait" or "landscape"
    }

    The ReplicateTool has been updated to ask the user for approval of the generated image.
    If the user rejects the image, the tool will automatically delete it and generate a new one
    until the user approves. You don't need to handle this logic in your code - the tool takes care of it.

    The tool will return a JSON string containing both the image_path and aspect_ratio of the approved image.
  expected_output: >
    A high-quality image that satisfies the technical and aesthetic requirements,
    accompanied by a log detailing generation parameters (including the aspect ratio used) and any quality assessments.
  agent: image_generator

research_seo:
  description: >
    Perform comprehensive keyword research and competitive analysis to optimize the Etsy listing.
    The output should include:
      - A ranked list of 13 effective keywords based on search volume and relevancy.
      - A suggested title that integrates high-impact keywords.
      - A detailed, SEO-friendly, one sentence description tailored to attract the target audience.
    Important: make sure each keyword does not exceed 20 characters
    Keyword guidelines: make sure to use a variety of relevant keyword phrases. Repeating keywords in the title and tags can strengthen our relevance, but only to an extent.
    Title guidelines: The title format should be: "{2~3 words concept summary} | Indigo Bloom Downloadable PRINTABLE Digital | IB{Listing number}. an example of a correct title: "Resilience Expressionism | Indigo Bloom Downloadable PRINTABLE Digital | IB58" or "Connection in Colors | Indigo Bloom Downloadable PRINTABLE Digital | IB89"
    Description guidelines: Etsy uses the words in your description when ranking their search results. Etsy recommends that you incorporate relevant keywords in the first few sentences. Make sure to add them in a way that sounds human and avoid copying your title verbatim or simply listing your top keywords. Since your listings' descriptions can also help convert views to sales, we suggest keeping your descriptions short, informative, and engaging. 

    IMPORTANT: Use the prompt engineer's output to understand the concept and style.
    The prompt engineer provides a JSON object with "prompt" and "aspect_ratio" keys.
    Use the prompt text to understand the concept and style for better SEO optimization.

    Provide a brief rationale for each recommendation to demonstrate the analysis process.

    IMPORTANT: After generating the SEO data, you MUST save it as a JSON file using the JsonSaveTool.
    There are two ways to do this:

    Option 1 (Preferred): Pass your SEO JSON object directly to the JsonSaveTool with the filename:
    ```python
    from etsy_listing_creator.tools import JsonSaveTool

    json_saver = JsonSaveTool()
    seo_json_path = json_saver.run({
        "data": your_seo_json_object,  # Your generated SEO data as a dictionary
        "filename": "output/seo_data.json"  # Save to this specific path
    })
    ```

    Option 2: If you encounter any errors with Option 1, you can also try passing your SEO JSON object directly:
    ```python
    from etsy_listing_creator.tools import JsonSaveTool

    json_saver = JsonSaveTool()
    your_seo_json_object["_filename"] = "output/seo_data.json"  # Add a filename hint
    seo_json_path = json_saver.run(your_seo_json_object)
    ```

    Make sure to include the saved file path in your response so it can be used by subsequent tasks.
  expected_output: >
    A JSON structure containing:
      - "status": "success" or "error"
      - "seo_data": The SEO optimization data
      - "file_path": Path to the saved SEO JSON file
  agent: seo_researcher

process_image:
  description: >
    Process the generated image to create multiple print-ready versions in standard sizes.

    IMPORTANT: The image_generator now provides a JSON string output with both the image path and aspect ratio.
    You need to parse this JSON string to extract both values. The output will look something like this:
    ```
    '{"image_path": "output/images/replicate_generated_1234567890.webp", "aspect_ratio": "portrait"}'
    ```

    You must first parse this JSON string:
    ```python
    import json

    # Parse the JSON string from the image_generator
    image_data = json.loads(image_generator_output)
    image_path = image_data["image_path"]
    aspect_ratio = image_data["aspect_ratio"]
    ```

    DO NOT use the example paths shown in these instructions. You MUST extract the ACTUAL image path from the image_generator's output.
    The actual path will typically be something like "output/images/replicate_generated_1234567890.webp" with a timestamp.

    Steps include:
      - Automatically generating 5 standard print sizes based on the aspect ratio:
        - For portrait (3:4): 4x6", 5x7", 8x10", 11x14", 16x20"
        - For landscape (4:3): 6x4", 7x5", 10x8", 14x11", 20x16"
      - Maintaining aspect ratio while upscaling to each target dimension.
      - Ensuring 300 DPI resolution for all sizes.
      - Applying HDR and sharpness enhancements for optimal print quality.
      - Verifying image quality and dimensions for each size.

    When using the ImageProcessingTool, provide the aspect_ratio parameter in your JSON input:
    {
      "image_path": "THE ACTUAL PATH FROM THE IMAGE GENERATOR'S OUTPUT",
      "aspect_ratio": "portrait" or "landscape",
      "fill_canvas": true,
      "preserve_colors": true
    }

    The preserve_colors parameter (default: true) controls whether to preserve the original colors of the image:
    - always set to true to maintain the original colors while still making the image print-ready

    Each size will be processed with professional print standards and saved with a clear size indicator in the filename.
  expected_output: >
    A list of paths to the processed image files, one for each standard print size appropriate for the aspect ratio used,
    with verification of quality metrics, proper naming convention, and the aspect ratio used.
  agent: image_processor

create_mockups:
  description: >
    Generate high-fidelity product mockups that showcase the digital art in realistic, marketable contexts.
    IMPORTANT: Use the image generated by the image_generator agent (NOT the processed images).

    The image_generator now provides a JSON string output with both the image path and aspect ratio.
    You need to parse this JSON string to extract both values. The output will look something like this:
    ```
    '{"image_path": "output/images/replicate_generated_1234567890.webp", "aspect_ratio": "portrait"}'
    ```

    You must first parse this JSON string:
    ```python
    import json

    # Parse the JSON string from the image_generator
    image_data = json.loads(image_generator_output)
    image_path = image_data["image_path"]
    aspect_ratio = image_data["aspect_ratio"]
    ```

    DO NOT use the example paths shown in these instructions. You MUST extract the ACTUAL image path from the image_generator's output.
    The actual path will typically be something like "output/images/replicate_generated_1234567890.webp" with a timestamp.

    The process should:
      - Dynamically overlay the generated art onto various scenes (e.g., framed on a wall, within a styled room setting).
      - Use the URL of the image from the image_generator's output directly.
      - Include detailed instructions for positioning, perspective, and environmental lighting to enhance realism.
      - Extract the aspect_ratio used by the image_generator and pass it to the DynamicMockupTool.

    When using the DynamicMockupTool, provide ALL required parameters in your JSON input:
    {
      "image_path": "THE ACTUAL PATH FROM THE IMAGE GENERATOR'S OUTPUT",
      "aspect_ratio": "portrait" or "landscape",
      "template_names": ["frame-mockup", "wall-art-mockup", "canvas-print-mockup", "poster-mockup", "living-room-mockup"]
    }

    The template_names parameter is REQUIRED and should include a list of template names to use for the mockups.
    Use the following template names based on the aspect ratio:
    - For landscape: ["landscape-frame-mockup", "landscape-wall-art-mockup", "landscape-canvas-print-mockup", "landscape-poster-mockup", "landscape-living-room-mockup"]
    - For portrait: ["portrait-frame-mockup", "portrait-wall-art-mockup", "portrait-canvas-print-mockup", "portrait-poster-mockup", "portrait-living-room-mockup"]

    Do not use any sandbox or placeholder images - only use the actual generated image from the previous step.
  expected_output: >
    A set of high-resolution mockup images accompanied by metadata in JSON format,
    detailing the context (e.g., indoor, outdoor, framed, unframed), the aspect ratio used, and any applied transformations.
  agent: mockup_generator

create_listing:
  description: >
    Create a complete Etsy listing based on the generated concept, image, SEO research, and mockups.
    Compile all the information into a structured format suitable for the Etsy API.

    IMPORTANT: The image_generator now provides a JSON string output with both the image path and aspect ratio.
    If you need to use the original image path, you must first parse this JSON string:
    ```python
    import json

    # Parse the JSON string from the image_generator
    image_data = json.loads(image_generator_output)
    image_path = image_data["image_path"]
    ```

    IMPORTANT: Organize all files created in the workflow into a structured directory system:

    1. Use the FileOrganizerTool to create a structured directory system with subdirectories for each file and step of the workflow.
       The tool will create a main directory named with the listing name and timestamp, and subdirectories for:
         * concept/ - For concept information
         * original/ - For the original generated image
         * prints/ - For all print-ready versions
         * mockups/ - For all mockup images
         * metadata/ - For SEO and listing information

    2. Prepare a JSON object with the following structure to pass to the FileOrganizerTool:
       ```json
       {
         "listing_name": "Descriptive name based on the concept",
         "files": {
           "concept": ["output/concept_data.json"],
           "original": ["path/to/original_image.png"],
           "prints": ["path/to/print1.png", "path/to/print2.png", ...],
           "mockups": ["path/to/mockup1.png", "path/to/mockup2.png", ...],
           "metadata": ["output/seo_data.json"]
         },
         "cleanup": true  // Set to true to delete original files after copying
       }
       ```

    3. The FileOrganizerTool will:
       - Create a unique directory with the listing name and timestamp
       - Create all necessary subdirectories
       - Copy all files to their appropriate locations with meaningful names
       - Generate a manifest.json file documenting all organized files
       - Delete the original files after copying them (if cleanup is true)
       - Return the path to the organized directory structure

    4. Workflow steps for file organization:
       a. Collect all file paths generated during the workflow:
          - The concept JSON from the idea_generator (should be at "output/concept_data.json")
          - The original image from the image_generator (extract from JSON output - the actual path, not the example path)
          - All print-ready versions from the process_image task (the actual paths returned by the tool)
          - All mockup images from the create_mockups task (the actual paths returned by the tool)
          - The SEO information from the research_seo task (should be at "output/seo_data.json")
       
       b. Create a descriptive listing name based on the concept
       
       c. Organize the files using the FileOrganizerTool:
          ```python
          from etsy_listing_creator.tools import FileOrganizerTool
          
          # IMPORTANT: Use the ACTUAL file paths from the previous steps, not example paths
          organizer = FileOrganizerTool()
          organized_dir = organizer.run({
              "listing_name": "Descriptive Listing Name",
              "files": {
                  "concept": ["output/concept_data.json"],  # Use the saved concept JSON file
                  "original": [actual_original_image_path],  # Use the ACTUAL path from the image generator
                  "prints": actual_print_ready_paths,  # Use the ACTUAL paths from the process_image task
                  "mockups": actual_mockup_image_paths,  # Use the ACTUAL paths from the create_mockups task
                  "metadata": ["output/seo_data.json"]  # Use the saved SEO JSON file
              },
              "cleanup": true  # Delete original files after copying
          })
          ```

    5. CRITICAL: Create a comprehensive listing JSON with all details:
       - You MUST compile all the SEO data (title, description, tags) from the research_seo task
       - You MUST include pricing information based on print sizes and market research
       - You MUST add file paths to all assets (original, prints, mockups)
       - You MUST include any additional metadata for Etsy's API
       
       The listing JSON should include at minimum:
       ```json
       {
         "title": "SEO-optimized title from research_seo",
         "description": "Detailed description from research_seo",
         "tags": ["tag1", "tag2", ...],
         "assets": {
           "original": "path/to/original/image.png",
           "prints": ["path/to/print1.png", "path/to/print2.png", ...],
           "mockups": ["path/to/mockup1.png", "path/to/mockup2.png", ...]
         },
         "metadata": {
           "concept": { ... concept JSON ... },
           "aspect_ratio": "portrait" or "landscape",
           "style": "style from concept",
           "theme": "theme from concept",
           "target_audience": "audience from concept"
         },
         "directory": "path/to/organized/directory"
       }
       ```

    6. IMPORTANT: Save the complete listing information as a JSON file named "listing.json" in the metadata/ subdirectory.
       To save the JSON data, use the JSON Save Tool with the following format:
       - Pass the listing data directly as a dictionary (not as a string)
       - Use the path returned by the FileOrganizerTool + "/metadata/listing.json" as the filename
       
       Example:
       ```python
       from etsy_listing_creator.tools import JsonSaveTool
       
       json_saver = JsonSaveTool()
       listing_json_path = json_saver.run({
           "data": listing_data_dictionary,  # The complete listing information
           "filename": f"{organized_dir}/metadata/listing.json"
       })
       ```

    7. YOUR FINAL RESPONSE MUST BE THE COMPLETE LISTING JSON OBJECT, not just the path to the file.
       This ensures that all the listing details are properly included in the output.
  expected_output: >
    A comprehensive JSON object containing:
      - "title": optimized title,
      - "description": detailed listing description,
      - "tags": array of SEO-friendly tags,
      - "pricing": pricing details (if applicable),
      - "assets": { 
          "original": file links to original images,
          "printable": file links to print-ready versions, 
          "mockups": file links to mockup images 
        },
      - "metadata": additional details for listing optimization,
      - "directory": path to the organized listing directory.
    The JSON should be saved to the metadata subdirectory and the path to the organized directory structure should be included in the response.
  agent: listing_creator
